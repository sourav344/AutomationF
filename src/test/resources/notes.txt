while running jenkins.war from CMD use this full command :

java -Dhudson.model.DirectoryBrowserSupport.CSP="" -jar jenkins.war  --enable-future-java


for running selenium grid
java -jar selenium-server-4.23.1.jar standalone
http://localhost:4444/status
http://localhost:4444/ui

Running Selenium Grid Locally with Multiple Nodes:
Standalone Mode:

The command java -jar selenium-server-4.23.1.jar standalone is used to run a single instance of Selenium that acts both as a hub and a node on the same machine.
This mode is typically used for simplicity, where you only have one machine, and you want to run tests locally without distributing them across multiple machines.
Hub-Node Setup:

If you're setting up a Selenium Grid with a hub and multiple nodes, the hub should be started separately using the hub mode, and the nodes should be started on different machines (or the same machine, but as separate processes).
Here’s how it works:

Start the Hub (on your main local machine):

bash
Copy code
java -jar selenium-server-4.23.1.jar hub
This will start the Selenium Grid hub, which listens for incoming WebDriver requests.

Start the Nodes (on separate machines or the same machine):

On each node machine (or on the same machine with different ports), you would run:

bash
Copy code
java -jar selenium-server-4.23.1.jar node --hub http://<hub-ip>:4444/grid/register
Replace <hub-ip> with the IP address of your hub machine. If the hub is on the same machine, you can use localhost.

If you want to run multiple nodes on the same machine, you would need to specify different ports for each node:

bash
Copy code
java -jar selenium-server-4.23.1.jar node --port <port-number> --hub http://localhost:4444/grid/register
Using the Hub URL in Your Tests:

In your test code, you would then use:
java
Copy code
URL hubUrl = new URL("http://localhost:4444/wd/hub");
This directs the WebDriver commands to the hub, which will distribute them across the connected nodes.
Key Points:
Standalone Mode: Suitable when you have one machine and don’t need to distribute tests across multiple machines.
Hub-Node Mode: Allows you to distribute tests across multiple machines or environments. The hub controls the distribution, and nodes execute the tests.
To Correct Your Understanding:
If you run java -jar selenium-server-4.23.1.jar standalone on your local machine, you are setting up a combined hub and node on that single machine. This is great for testing locally but doesn't leverage other machines.
For a distributed setup with separate node machines, you should start the hub on your main machine and then connect the separate node machines using the node --hub command.
This way, the hub can distribute the test load to your three separate node machines, and you can still use URL hubUrl = new URL("http://localhost:4444/wd/hub"); in your tests.


If you set up Selenium Grid on the same local machine to act as both the hub and the node, and set the TestNG parallel attribute to false, parallel testing will not happen. Here’s why:

Key Points:
TestNG parallel=false:

Setting parallel=false in your TestNG XML file instructs TestNG to run all tests sequentially, one after the other, regardless of how many nodes or threads are available.
TestNG will not initiate parallel execution of test methods, classes, or tests if this attribute is set to false.
Selenium Grid on the Same Machine:

Even though you have configured Selenium Grid with both the hub and node on the same local machine, the parallel execution is primarily controlled by TestNG (when using TestNG for test management).
Selenium Grid allows for distributed and parallel execution across multiple nodes, but it requires the test execution framework (like TestNG) to actually send parallel test requests to the hub.
Scenario:
Hub and Node on the Same Machine: Your Selenium Grid can still run tests, but since TestNG is not configured to run tests in parallel, it will only send one test at a time to the hub. The hub will then send it to the node (which is also on the same machine), and the test will run sequentially.
Summary:
No Parallel Testing: If parallel=false, TestNG will execute tests sequentially, even if your Selenium Grid is set up to handle parallel execution.
To Enable Parallel Testing: You need to set the parallel attribute to methods, classes, tests, or instances in your TestNG XML file, depending on how you want to achieve parallelism. This will instruct TestNG to run tests concurrently, and Selenium Grid will then handle the distribution of these parallel test executions.
Here’s an example of how you could set up parallel testing in TestNG:

xml
Copy code
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="ParallelSuite" parallel="methods" thread-count="3">
    <test name="ExampleTests">
        <classes>
            <class name="YourTestClassName"/>
        </classes>
    </test>
</suite>
In this example, TestNG will run methods in parallel across 3 threads, and Selenium Grid will distribute these parallel test executions accordingly.